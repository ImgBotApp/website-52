include app/template/_mixins
doctype html
block root
//- to debug injections, add ng-strict-di to <html> element and run in dev mode!
html#app(lang="en")
	head
		title(ng-bind="pageTitle") VPDB
		//- pre-load fonts
		each preLoad in htmlWebpackPlugin.options.preLoad
			link(rel="preload", href!=preLoad.href, as=preLoad.as, crossorigin)
		//- pre-connect
		each preConnect in htmlWebpackPlugin.options.preConnect
			link(rel="preconnect", href!=preConnect, crossorigin)
		meta(charset='utf8')
		meta(name="viewport", content="width=device-width, initial-scale=1")
		meta(name="theme-color", content="#2c190b")
		meta(http-equiv="Cache-control", content="public")
		meta(name="description", content="{{ meta.description }}")
		meta(name="keywords", content="{{ meta.keywords }}")
		meta(name="thumbnail", content="{{ meta.thumbnail }}")
		link(rel="apple-touch-icon", sizes="180x180", href="/favicon/apple-touch-icon.png")
		link(rel="icon", type="image/png", sizes="32x32", href="/favicon/favicon-32x32.png")
		link(rel="icon", type="image/png", sizes="16x16", href="/favicon/favicon-16x16.png")
		link(rel="manifest", href="/manifest.json")
		link(rel="mask-icon", href="/favicon/safari-pinned-tab.svg", color="#5bbad5")
		link(rel="shortcut icon", href="/favicon.ico")

		meta(name="msapplication-TileColor", content="#ec843d")
		meta(name="msapplication-config", content="/favicon/browserconfig.xml")
		meta(http-equiv="X-UA-Compatible", content="IE=Edge")
		style.
			@keyframes loading-spinner {
				to {
					transform: rotate(360deg)
				}
			}
			html.wf-loading > body > vpdb > * {
				display:none
			}
			html.wf-loading > body > vpdb > loading {
				display:block
			}
			body {
				background-color: #121110
			}
			loading > .logo {
				margin: 0;
				position: absolute;
				top: 35%;
				left: 50%;
				transform: translate(-55%, -35%)
			}
			loading > .logo svg.svg-icon {
				fill: #4d4b49;
				position: absolute
			}
		base(href="/")
		//- styles
		each cssFileName in htmlWebpackPlugin.files.css
			link(rel="preload" href=cssFileName as="style" onload="this.onload=null;this.rel='stylesheet'")
		script !{htmlWebpackPlugin.options.loadCss}

	body#top(ng-class="themeName || 'theme-dark'")

		//- the app
		vpdb
			//- display this until the app has bootstrapped
			loading#loading
				.logo
					div(style='height:100px')
						svg.svg-icon(style='height:88px;width:88px;top:6px;left:6px;')
							use(xlink:href='#vpdb')
						svg.svg-icon(style='height:100px;width:100px;animation:loading-spinner 2s linear infinite;')
							use(xlink:href='#vpdb-notch')
					div
						svg.svg-icon(style='height:40px;width:40px;position:relative;left:11px')
							use(xlink:href='#logo-vp')
						svg.svg-icon(style='height:40px;width:40px;position:relative;left:6px')
							use(xlink:href='#logo-db')

		//- notifications
		growl-notifications

		//- download from anywhere
		form#downloadForm(method="GET", target="_self", ng-attr-action="{{ downloadLink }}")
			input(type="hidden", ng-attr-name="body", value="{{ downloadBody }}")
			input(type="hidden", ng-attr-name="save_as", value="1")
			input(type="hidden", ng-attr-name="token", value="{{ downloadToken }}")

		//- just let them know..
		noscript
			.container.container--topmost
				.text-center
					p(style="color: #4d4b49; margin-top: 40px") Dude, you need to enable Javascript if you want to hang out here.
					p.padder-bottom-2x &nbsp;

		//- sprites
		each spriteFileName in htmlWebpackPlugin.files.sprites
			| !{spriteFileName}

		//- load typekit fonts
		script(type="text/javascript").
			(function(d) {
				var config = {
						kitId: 'xhi7wnv',
						scriptTimeout: 3000,
						async: true
					},
					h = d.documentElement, t = setTimeout(function() {
						h.className = h.className.replace(/\bwf-loading\b/g, "") + " wf-inactive";
					}, config.scriptTimeout), tk = d.createElement("script"), f = false,
					s = d.getElementsByTagName("script")[0], a;
				h.className += " wf-loading";
				tk.src = '//use.typekit.net/' + config.kitId + '.js';
				tk.async = true;
				tk.onload = tk.onreadystatechange = function() {
					a = this.readyState;
					if (f || a && a != "complete" && a != "loaded") return;
					f = true;
					clearTimeout(t);
					try {
						Typekit.load(config)
					} catch (e) {
					}
				};
				s.parentNode.insertBefore(tk, s)
			})(document);

		//- scripts
		each jsFileName in htmlWebpackPlugin.files.js
			script(type="text/javascript" src=jsFileName)

		//- Google Analytics FIXME
		//if gaEnabled
		//	script(type="text/javascript") (function(i, s, o, g, r, a, m) { i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function() { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o), m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m) })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
